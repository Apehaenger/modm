/*
 * Copyright (c) 2019, Ethan Slattery
 * Copyright (c) 2020, Erik Henriksson
 * Copyright (c) 2022, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#pragma once

#include <cstdint>
#include "../device.hpp"
#include <modm/architecture/interface/delay.hpp>
#include <modm/platform/gpio/config.hpp>

namespace modm::platform
{
/// @ingroup modm_platform_gclk
/// @{

enum class
ClockSource : uint32_t
{
%% for source in clock_sources
	{{ source.name }} = {{ source.value }}{% if not loop.last %},{% endif %}
%% endfor
};

enum class
ClockGenerator : uint32_t
{
	System = 0,
	ExternalCrystal32K = 1,
	ULP32K = 2,
	Internal8M = 3,
	Main = 0,
%% for i in range(0, generator_count)
	Generator{{i}} = {{i}}{% if not loop.last %},{% endif %}
%% endfor
};

enum class
ClockPeripheral : uint32_t
{
%% for clock in peripheral_clocks
%%	set instance=clock.get("instance", "")
%%	set name=clock.get("name", "")
%%	if clock["peripheral"] in ["sysctrl", "oscctrl"]
%% 	set peripheral=""
%% else
%% 	set peripheral=clock["peripheral"]
%% endif
%%	if clock["peripheral"] == "sercom" and name == "core"
%% 	set name=""
%% endif
%% 	set id=peripheral.capitalize() + instance + name.capitalize()
	{{ id }} = {{clock["value"]}}{% if not loop.last %},{% endif %}
%% endfor
};
/// @}
%% endif

/**
 * Clock management
 *
 * @ingroup modm_platform_gclk
 */
class GenericClockController
{
public:
	static constexpr uint32_t BootFrequency = {{ boot_frequency }};

	template< uint32_t Core_Hz, uint16_t Vdd_mV=3300 >
	static uint32_t
	setFlashLatency();

	template< uint32_t Core_Hz >
	static void
	updateCoreFrequency();

%% if device_family == "d2x"
	static bool
	initOsc8MHz(uint32_t waitCycles = 2048);

	static bool
	initExternalCrystal(uint32_t waitCycles = 2048);

	static bool
	initDFLL48MHz(uint32_t waitCycles = 2048);

	static bool
	setSystemClock(
		ClockSource source = ClockSource::OSC8M,
		uint32_t waitCycles = 2048);

	template< ClockPeripheral peripheral >
	static void
	connect(ClockGenerator clockGen);
private:

	enum class
	ClockMux : uint32_t
	{
		DFLL48M = 0,
	};
%% endif
};

#if defined(__DOXYGEN__)
/// Peripheral AHB/APB bus clock control
/// @ingroup modm_platform_gclk
template<typename Peripheral>
struct PeripheralClock
{
	/// Enable peripheral clock
	static void enable();
	/// Disable peripheral clock
	static void disable();
};
#else
template<typename Peripheral>
struct PeripheralClock;
#endif

}

#include "gclk_impl.hpp"
