#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2022, Christopher Durand
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = ":platform:gclk"
    module.description = "Generic Clock Controller (GCLK)"

def prepare(module, options):
    if not options[":target"].has_driver("gclk:sam"):
        return False

    module.depends(":cmsis:device", ":architecture:delay", ":platform:clock")
    return True

def build(env):
    target = env[":target"].identifier
    driver = env[":target"].get_driver("gclk")

    if target.family in ["d", "e"] and target.series.startswith("5"):
        device_family = "e5x"
    elif target.family == "d" and target.series.startswith("2"):
        device_family = "d2x"
    else:
        raise RuntimeError("Unsupported device")

    if device_family == "e5x":
        boot_frequency = "48'000'000"
    else: # d2x
        boot_frequency = "1'000'000"

    env.substitutions = {
        "target": target,
        "boot_frequency": boot_frequency,
        "device_family": device_family,
        "clock_map": env.query(":cmsis:device:clock-map"),
        "peripheral_clocks": driver["clock"],
        "clock_sources": driver["source"],
        "generator_count": int(driver["generators"][0])
    }
    env.outbasepath = "modm/src/modm/platform/clock"
    env.template("gclk.hpp.in")
    env.template("gclk.cpp.in")
    env.template("gclk_impl.hpp.in")
