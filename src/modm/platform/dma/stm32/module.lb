#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2020, Mike Wolfram
# Copyright (c) 2021, Raphael Lehmann
# Copyright (c) 2021, Christopher Durand
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

from collections import defaultdict

def init(module):
    module.name = ":platform:dma"
    module.description = "Direct Memory Access (DMA)"


def prepare(module, options):
    device = options[":target"]

    module.depends(":cmsis:device", ":platform:rcc")

    if (not device.has_driver("dma")) or device.get_driver("dma")["type"] not in \
            [
            "stm32-channel-request",
            "stm32-channel",
            "stm32-mux",
    ]:
        return False

    did = device.identifier

    # Enable DMA for all but some devices...

    if did["family"] in ["f0"]:
        if did["name"] in ["30", "71", "72", "78", "91", "98"]:
            # STM32F09x has shared interrupts between DMA1 and DMA2, not supported...
            return False
        return True

    if did["family"] in ["f1"]:
        if did["name"] in ["02", "05", "07"]:
            return True
        if did["name"] in ["00", "01", "03"] and did["pin"] in ["r", "v", "z"] and did["size"] in ["c", "d", "e", "f", "g"]:
            return True
        return False

    if did["family"] in ["f3"]:
        if did["name"] in ["73", "78"]:
            return False
        if did["name"] in ["02"] and did["pin"] in ["c"] and did["size"] in ["b", "c"]:
            return False
        return True

    if did["family"] in ["l0", "l4"]:
        return True

    if did["family"] in ["l1"]:
        if did["size"] in ["c"]:
            return False
        return True

    if did["family"] in ["g0", "g4"]:
        return True

    return False


def build(env):
    device = env[":target"]

    properties = device.properties
    properties["target"] = device.identifier
    dma = device.get_driver("dma")
    properties["dma"] = dma

    signal_names = {}
    controller = []
    if dma["type"] in ["stm32-channel-request", "stm32-channel"]:
        # Get the peripheral supported by DMA from device info and create a list of signals
        # (also determines the maximum number of channels per controller)
        for channels in dma["channels"]:
            max_channels = 0
            for channel in channels["channel"]:
                max_channels = channel["position"]
                if dma["type"] in ["stm32-channel-request"]:
                    for request in channel["request"]:
                        for signal in request["signal"]:
                            if "name" in signal:
                                signal_name = signal["name"].capitalize()
                                signal_names[signal_name] = 1
                else:
                    for signal in channel["signal"]:
                        if "name" in signal:
                            signal_name = signal["name"].capitalize()
                            signal_names[signal_name] = 1
            controller.append({"instance": int(channels["instance"]),
                               "min_channel": 1, "max_channel": int(max_channels)})
    else:  # type is stm32-mux
        for request_data in dma["requests"]:
            for request in request_data["request"]:
                assert len(request["signal"]) == 1  # one signal per request for dmamux
                signal = request["signal"][0]
                if "name" in signal:
                    signal_name = signal["name"].capitalize()
                    signal_names[signal_name] = 1

        assert len(dma["mux-channels"]) == 1  # only one DMAMUX instance is supported
        channels = dma["mux-channels"][0]["mux-channel"]
        instance_channels = defaultdict(list)
        for channel in channels:
            instance_channels[channel["dma-instance"]].append(channel["dma-channel"])
        for instance in instance_channels:
            channel_list = instance_channels[instance]
            channel_list.sort()
            min_channel = channel_list[0]
            max_channel = channel_list[-1]
            controller.append({"instance": int(instance), "min_channel": int(min_channel), "max_channel": int(max_channel)})

    did = device.identifier
    if (did.family in ['f0'] and did.name == '30' and did.size == 'c') or (did.family in ['f1'] and did.name == '02'):
        # FIXME: Bug in modm-deviced data: Dma2 does not exist on device.identifier
        properties["dma"]["instance"].remove('2')

    signal_names = sorted(list(set(signal_names)))
    properties["dmaType"] = dma["type"]
    properties["dmaSignals"] = signal_names
    properties["dmaController"] = controller

    properties['channel_count'] = {
        "min" : min(controller, key=lambda c: c["min_channel"])["min_channel"],
        "max" : max(controller, key=lambda c: c["max_channel"])["max_channel"]
    }

    def irq_list_for_dma_instance(instance):
        irqs = [v["name"] for v in device.get_driver("core")["vector"]]
        irqs = [v for v in irqs if v.startswith("DMA" + instance) and not "DMA2D" in v]
        irq_list = list()
        for irq in irqs:
            irq_channel_list = []
            for c in irq.split("Channel",1)[1]:
                if c.isdigit():
                    irq_channel_list.append(int(c))
            irq_list.append(irq_channel_list)
        return irq_list

    properties["irqList"] = dict()
    if dma["type"] in ["stm32-channel-request", "stm32-channel"]:
        for channels in dma["channels"]:
            irq_list = irq_list_for_dma_instance(channels["instance"])
            properties["irqList"][int(channels["instance"])] = irq_list
    else:  # type is stm32-mux
        channels = dma["mux-channels"][0]["mux-channel"]
        instances = list(dict.fromkeys(([channel["dma-instance"] for channel in channels])))
        for instance in instances:
            irq_list = irq_list_for_dma_instance(instance)
            properties["irqList"][int(instance)] = irq_list

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/dma"

    env.template("dma_base.hpp.in")
    env.template("dma_hal.hpp.in")
    env.template("dma_hal_impl.hpp.in")
    env.template("dma.hpp.in")
    env.template("dma.cpp.in")

